plsr
library(pls)
?plsr
source("test_plsr.R")
source("test_plsr.R")
source("test_plsr.R"); runTests()
sens.pls
names(sens.pls)
sens.pls$Yloadings[,1,2]
sens.pls$Yloadings[,1:2]
sens.pls$loadings[,1:2]
Q
source("test_plsr.R"); startOncoscape()
source("test_plsr.R"); startOncoscape()
source("test_plsr.R"); 
   manifest.file <- "~/s/data/hamid/repo/hbolouri/oncoDev/Oncoscape/inst/scripts/angiogenesis/manifest.txt"
   onco <- Oncoscape(file=NA, port=7654L, mode="websockets", openBrowser=FALSE, manifest.file)

args(Oncoscape)
   onco <- Oncoscape(htmlFile=NA, port=7654L, mode="websockets", openBrowser=FALSE, manifest.file)
setup
setup(onco)
q('no')
source("test_plsr.R"); startOncoscape()
ls(DATA.PROVIDERS)
ls(Oncoscape:::DATA.PROVIDERS)
sort(ls(Oncoscape:::DATA.PROVIDERS))
source("test_plsr.R"); runTests()
c
c
source("test_plsr.R"); runTests()
sort(nams(sens.pls))
sort(names(sens.pls))
dim(oliveoil)
oliveoil
?oliveoil
rownames(oliveoil)
colnames(oliveoil)
oliveoil$chemical
class(oliveoil$chemical)
dim(getData(Oncoscape:::DATAPROVIDER$mrna))
dim(getData(Oncoscape:::DATA.PROVIDER$mrna))
dim(getData(Oncoscape:::DATA.PROVIDERS$mrna))
dim(getData(Oncoscape:::DATA.PROVIDERS[["mRNA"]]))
   tbl.ptclass <<- getData(Oncoscape:::DATA.PROVIDERS[["patientClassification"]]))
   tbl.ptclass <<- getData(Oncoscape:::DATA.PROVIDERS[["patientClassification"]])
dim(tbl.ptclass)
source("test_plsr.R"); runTests()
source("test_plsr.R"); runTests()
x$loadings
names(x$loadings)
class(x$loadings)
x$loading[, 1:2]
x$loadings[, 1:2]
x$loadings
x$loadings[, 1:2]
x$yloadings[, 1:2]
x$Yloadings[, 1:2]
dim(x$loadings[, 1:2])
dim(x$Yloadings[, 1:2])
rownames(x$Yloadings[, 1:2])
rownames(x$loadings[, 1:2])
source("test_plsr.R"); runTests()
source("test_plsr.R"); runTests()
source("test_plsr.R")
source("test_plsr.R")
startOncoscape()
   tbl.pt <<- getData(Oncoscape:::DATA.PROVIDERS[["patientHistory"]])
ls(Oncoscape:::DATA.PROVIDERS)
source("test_plsr.R")
sort(ls(Oncoscape:::DATA.PROVIDERS))
dim(tbl)
sapply(tbl.ptHis, class)
fivenum(tbl.pt$ageAtDx)
fivenum(tbl.ptHis$ageAtDx)
source("test_plsr.R"); runTests()
source("test_plsr.R"); runTests()
dim(tbl.ptHis)
fivenum(tbl.ptHis$ageAtDx)
sapply(tbl.ptHis, class)
fivenum(tbl.ptHis$survival)
source("test_plsr.R"); runTests()
source("test_plsr.R"); runTests()
?plsr
data(yarn)
class(yar)
class(yarn)
dim(yarn)
yard
yarn
dim(yarn)
args(matrix)
tbl.ptHis[1:10, 1:10]
dim(tbl.ptHis)
ageAtDx.lo
ageAtDx.lo
dim(subset(tbl.ptHis, ageAtDx <= agetAtDx.lo))
dim(subset(tbl.ptHis, ageAtDx <= 15))
which(tbl.ptHis <= ageAtDx.lo)
which(tbl.ptHis$ageAtDx <= ageAtDx.lo)
    ageAtDxLowTissues <- tbl.ptHis$ID [which(tbl.ptHis$ageAtDx <= agetAtDx.lo)]
5 <- 10
5 <= 10
q(
'no')
source("test_plsr.R"); runTests()
source("test_plsr.R"); runTests()
source("test_plsr.R"); createClassificationMatirx
source("test_plsr.R"); createClassificationMatrix
ageAtDx.lo
ageAtDx.lo=15
ageAtDx
ageAtDx.lo
which(tbl.ptHis$ageAtDx <= agetAtDx.lo)
ageAtDx.lo <= 15
ageAtDx.lo <- 15
which(tbl.ptHis$ageAtDx <= agetAtDx.lo)
    ageAtDxLowTissues <- tbl.ptHis$ID [which(tbl.ptHis$ageAtDx <= ageAtDx.lo)]
source("test_plsr.R"); test_createClassificationMatrix()
ageAtDxHighTissues
   ageAtDx.hi <- 80
    ageAtDxHighTissues <- subset(tbl.ptHis, ageAtDx >= ageAtDx.hi)$ID
length(ageAtDxHighTissues)
length(ageAtDxLowTissues)
    ageAtDxLowTissues <- sbust(tbl.ptHis, ageAtDx <= ageAtDx.lo)$ID
    ageAtDxLowTissues <- subset(tbl.ptHis, ageAtDx <= ageAtDx.lo)$ID
length(ageAtDxLowTissues)
length(ageAtDxLowTissues <- subset(tbl.ptHis, ageAtDx <= ageAtDx.lo)$ID)
length(ageAtDxLowTissues <- subset(tbl.ptHis, ageAtDx <= 20)$ID)
length(ageAtDxLowTissues <- subset(tbl.ptHis, ageAtDx <= 30)$ID)
    survivalHighTissues <- subset(tbl.ptHis, survival >= survival.hi)$ID
length(survivalHightTissues); length(survivalLowTissues)
    survivalHighTissues <- subset(tbl.ptHis, survival >= survival.hi)$ID
length(survivalHighTissues)
length(survivalLowTissues)
survival.lo
dim(subset(tbl.ptHis, survival <= 0.2)$ID)
dim(subset(tbl.ptHis, survival <= 0.5)$ID)
fivenum(tbl.ptHis$survival)
length(subset(tbl.ptHis, survival <= 0.5)$ID)
length(subset(tbl.ptHis, survival <= 0.2)$ID)
length(subset(tbl.ptHis, survival <= 0.1)$ID)
q('no')    survivalHighTissues <- subset(tbl.ptHis, survival >= survival.hi)$ID
q('no')
source("test_plsr.R"); 
source("test_plsr.R"); runTests()
startOncoscape()
dim(mtx.classify)
head(mtx.classify)
sum(mtx.classify)
which(rowSums(mtx.classify) > 1)
head(rownames(tbl.mrna))
head(rownames(mtx.classify)
)
length(which(rowSums(mtx.classify) == 0))
dim(mtx.classify)
source("test_plsr.R"); runTests()
dim(mtx.classify)
length(which(rowSums(mtx.classify) > 0))
colSums(mtx.classify)
as.list(colSums(mtx.classify))
Q
source("test_plsr.R"); runTests()
source("test_plsr.R"); runTests()
c
source("test_plsr.R"); runTests()
dim(tbl.mrna)
tbl.mrna[1:10, 1:10]
source("test_plsr.R"); runTests()
fit
class(tbl.mrna)
fit <- plsr(mtx.categories ~ mtx.mrna, ncomp=numberOfComponents,  validation="LOO")
dim(mtx.classify); dim(mtx.mrna)
names(fit)
fit$loadings
fit$Yloadings
dim(mtx.mrna); dim(mtx.classify)
fit$Yloadings
mtx.mrna[1:10, 1:10]
fit$Yloadings
Q
source("test_plsr.R"); runTests()
fit$Yloadings
Q
source("test_plsr.R"); runTests()
fit$Yloadings
colSums(mtx.classify)
)
fit$Yloadings
head(mtx.mrna)
head(mtx.mrna [, 1:10])
fit$Yloadings
yLoadings12
source("test_plsr.R"); runTests()
fit$Yloadings
colnames(mtx.classify)
head(mtx.classify)
fit$Yloadings
yLoadings12
fit$YLoadings
fit$Yloading
Q
source("test_plsr.R"); runTests()
source("test_plsr.R"); runTests()
fit.demo$loadings
source("test_plsr.R"); test_createClassificationMatrix()
source("test_plsr.R"); test_createClassificationMatrix()
source("test_plsr.R"); runTests()
source("test_plsr.R"); runTests()
fit.demo$Yloadings
head(fit.demo$loadings)
fit.demo$loadings
fit.demo$Yloadings
yLoadings12
x <- rnorm(90, mean=1, sd=.1)
x
sd(x)
y <- rnorm(10, mean=5, sd=5)
y
xy <- c(x, y)
sd(xy)
sd(x); sd(y)
max(x); max(y)
?plsr
fit <- plsr(mtx.classify ~ mtx.mrna[, gene.indices], ncomp=2, scale=TRUE,validation="none")
str(fit)
fit$loadings[, 1:2]
max(fit$loadings[, 1:2])
min(fit$loadings[, 1:2])
fit <- plsr(mtx.classify ~ mtx.mrna[, gene.indices], ncomp=2, scale=FALSE,validation="none")
min(fit$loadings[, 1:2])
max(fit$loadings[, 1:2])
biplot(fit$loadings[,1:2],fit$Yloadings[,1:2],col=c("gray","red"),cex=c(0.5,1))
head(tbl.mrna)
dim(mtx.mrna)
sd <- apply(mtx.mrna, 1, sd)
fivenum(sd)
head(sd)
sd <- apply(mtx.mrna, 2, sd)
head(sd)
head(tbl)
source("test_plsr.R"); xx <- getGetClassifierGenes()
length(xx)
mtx.mrna[1:10, 1:10]
source("test_plsr.R"); 
head(deleters)
head(keepers)
"ABCA1" %in% getClassiferGenes()
"ABCA1" %in% getClassifierGenes()
dim(mtx.mrna)
head(fit$loadings[,1:2])
biplot(fit$loadings[,1:2],fit$Yloadings[,1:2],col=c("gray","red"),cex=c(0.5,1))
?plsr
grep"anbp", colnames(mtx.mrna), ignore.case=T, v=T)
grep("anbp", colnames(mtx.mrna), ignore.case=T, v=T)
plot(mtx.mrna[, "RANBP17"])
biplot(fit$loadings[,1:2],fit$Yloadings[,1:2],col=c("gray","red"),cex=c(0.5,1))
colnames(tbl.patientHistory)
fivenum(tbl.patientHistory$ageAtDx)
ls(Oncoscape::DATA.PROVIDERS)
ls(Oncoscape:::DATA.PROVIDERS)
"patientHistoryTable" %in% ls(Oncoscape:::DATA.PROVIDERS)
q('no')
source("test_plsr.R"); 
startOncoscape()
   patientHistoryProvider <- Oncoscape:::DATA.PROVIDERS$patientHistoryTable
   tbl.ptHis <<- getTable(patientHistoryProvider)
dim(tbl.ptHis)
PatientHistoryProvider("tbl://tcgaGBM/tbl.ptHistory.RData")
prov <- PatientHistoryProvider("tbl://tcgaGBM/tbl.ptHistory.RData")
xx <- getTable(prov)
dim(xx)
q('no')
source("wsTest_plsr.R"); test_ping
source("wsTest_plsr.R"); test_ping()
source("wsTest_plsr.R"); test_ping()
source("wsTest_plsr.R"); test_ping()
source("wsTest_plsr.R"); test_ping()
q('no')
source("wsTest_plsr.R"); runTests()
source("wsTest_plsr.R"); runTests()
client
rm(client)
source("wsTest_plsr.R"); runTests()
source("wsTest_plsr.R"); runTests()
msg.incoming$cmd
q('no')
source("wsTest_plsr.R"); runTests()
q('no')
source("wsTest_plsr.R"); runTests()
q('no')
source("wsTest_plsr.R"); runTests()
q('no')
source("wsTest_plsr.R"); runTests()
q('no')
source("wsTest_plsr.R"); runTests()
q('no')
source("wsTest_plsr.R"); runTests()
q('no')
source("wsTest_plsr.R"); runTests()
q('no')
source("wsTest_plsr.R"); runTests()
q('no')
source("wsTest_plsr.R"); runTests()
q('no')
source("wsTest_plsr.R"); runTests()
q('no')
source("wsTest_plsr.R"); runTests()
source("wsTest_plsr.R"); runTests()
q('no')
source("wsTest_plsr.R"); runTests()
q('no')
source("wsTest_plsr.R"); runTests()
names(msg.incoming)
x <- msg.incoming
x$status
names(x$payload)
msg$incoming$payload$vectors
msg.incoming$payload$vectors
msg.incoming$payload[["vectors"]]
nchar(msg.incoming$payload[["vectors"]])
nchar(msg.incoming$payload[["genes"]])
source("wsTest_plsr.R"); runTests()
q('no')
source("wsTest_plsr.R"); runTests()
q('no')
source("wsTest_plsr.R"); runTests()
q('no')
source("wsTest_plsr.R"); runTests()
q('no')
source("wsTest_plsr.R"); runTests()
q('no')
source("wsTest_plsr.R"); runTests()
q('no')
source("wsTest_plsr.R"); runTests()
q('no')
