traceback()
getPatientData(cdp, patients="1A14UWY76UUD29815FZHJ9O9I8WOWUR592YS", events="Patients")
print(getPatientData(cdp, patients="1A14UWY76UUD29815FZHJ9O9I8WOWUR592YS", events="Patients"))
c
c
c
c
c
Q
q('no')
source("test_CaisisDataProviders.R")
dim(tbl)
all.twentieth.century
tbl$DOB
which(tbl$DOB=="")
length(which.twentieth.century)
missing
source("test_CaisisDataProviders.R")
test_getClinical_DOB_only()
test_getClinicalTable_DOB_only()
q('no')
source("test_CaisisDataProviders.R"); test_getClinical_DOB_only()
source("test_CaisisDataProviders.R"); test_getClinicalTable_DOB_only()
q('no')
source("test_CaisisDataProviders.R"); test_getClinicalTable_DOB_only()
x
Q
tbl <- getClinicalTable(cdp, patients[1], events)
q('no')
source("test_CaisisDataProviders.R"); test_getClinicalTable_DOB_only()
x
Q
q('no')
source("test_CaisisDataProviders.R"); test_getClinicalTable_DOB_only()
x
new.row
Q
q('no')
source("test_CaisisDataProviders.R"); test_getClinicalTable_DOB_only()
tbl
nchar(tbl$Death)
missing.death.dates
nchar(tbl$Death)
length(which(nchar(tbl$Death) == 0)
)
dim(tbl)
as.data.frame(table(tbl$Death))
source("test_CaisisDataProviders.R"); test_getClinicalTable_DOB_Death()
runTests()
length(patients)
dim(tbl)
tbl
dim(tbl)
wdth(600)
head(tbl)
tbl
colnames(tbl)
as.data.frame(table(tbl$ChemoAgent))
length(x)
x
lapply(x, function(e) e$TableName)
unlist(lapply(x, function(e) e$TableName))
as.list(table(unlist(lapply(x, function(e) e$TableName))))
counts
sort(names(counts))
wdth(100)
sort(names(counts))
x[1]
names(x)
class(x); class(x3)
length(x); length(x3)
x[[1]]
x3[[1]]
names(x[[1]])
names(x3[[1]])
x3[[1]]$PtNum
checkEquals(x3[[1]]$PtNum, 1)
class(x)
class(x)
is(x, "list")
x[[1]]$PtNum
x[[1]]
length(x3)
class(x3)
q('no')
source("test_CaisisDataProviders.R")
class(x3)
length(x3)
length(x)
x[[1]]
x3[[1]]
x[[1]]$PatientID
x[[1]]
x[[1]]$PatientI
x3[[1]]
dim(tbl)
t(tbl[1,])
dir('../extdata')
colnames(tbl)
wdth(100)
colnames(tbl)
source("test_CaisisDataProviders.R"); runTests()
q('no')
source("test_PatientHistoryProvider.R"); runTests()
cdp
class(cdp)
q('no')
source("test_PatientHistoryProvider.R"); runTests()
cdp
slotNames(cdp)
cdp@path
q('no')
q('no')
source("test_PatientHistoryProvider.R"); runTests()
cdp@path
patientIDs(cdp)
q('no')
source("test_PatientHistoryProvider.R"); runTests()
patientEventNames(cdp)
q('no')
source("test_PatientHistoryProvider.R"); runTests()
source("test_PatientHistoryProvider.R"); runTests()
source("test_PatientHistoryProvider.R"); runTests()
class(cdp)
source("test_PatientHistoryProvider.R"); runTests()
source("test_CaisisPatientHistoryProvider.R"); runTests()
source("test_CaisisPatientHistoryProvider.R"); runTests()
q(
'no')
source("test_TCGA_PatientHistoryProvider.R")runTests()
source("test_TCGA_PatientHistoryProvider.R");runTests()
directory
n
files
dim(tbl)
Q
source("test_TCGA_PatientHistoryProvider.R");runTests()
n
files
directory
n
n
n
full.path
n
n
full.path
n
dim(tbl)
colnames(tbl)
head(rownames(tbl))
t(tbl[1,])
t(tbl[3,])
Q
q('no')
source("test_TCGA_PatientHistoryProvider.R");runTests()
source("test_PatientHistoryProvider.R");runTests()
q('no')
source("test_PatientHistoryProvider.R");runTests()
names(x)
.load
Q
q('no')
source("test_PatientHistoryProvider.R");runTests()
c
q('no')
source("test_PatientHistoryProvider.R");runTests()
source("test_PatientHistoryProvider.R");runTests()
q('no')
source("test_PatientHistoryProvider.R");runTests()
q('no')
source("test_PatientHistoryProvider.R");runTests()
q('no')
source("test_PatientHistoryProvider.R");runTests()
php
Q
q('no')
source("test_PatientHistoryProvider.R");runTests()
q('no")
q("no")
source("test_PatientHistoryProvider.R");runTests()
q('no')
source("test_PatientHistoryProvider.R");runTests()
source("test_PatientHistoryProvider.R");runTests()
php
x <- getTable(php)
dim(x)
colnames(tbl)
Q
q('no')
source("test_PatientHistoryProvider.R");runTests()
colnames(tbl)
all(c("ID", "DOB") %in% colnames(tbl))
Q
source("test_PatientHistoryProvider.R");runTests()
args(environment)
emptyenv()
q('no')
source("test_Data2DProvider.R")
runTests()
q('no')
source("test_Data2DProvider.R"); runTests()
q('no')
source("test_Data2DProvider.R"); runTests()
source("test_Data2DProvider.R"); runTests()
q('no')
source("test_Data2DProvider.R"); runTests()
q('no')
source("test_Data2DProvider.R"); runTests()
q('no')
source("test_Data2DProvider.R"); runTests()
dp
q('no')
source("test_Data2DProvider.R"); runTests()
features(dp)
q('no')
source("test_Data2DProvider.R"); runTests()
entities(dp)
q('no')
source("test_Data2DProvider.R"); runTests()
features(dp)
selectMethod("features")
selectMethod("features", signature="LocalFileData2DProvider")
showMethods("features")
q('no')
source("test_Data2DProvider.R"); runTests()
showMethods("features")
q('no')
source("test_Data2DProvider.R"); runTests()
q('no')
source("test_Data2DProvider.R"); runTests()
q('no')
source("test_Data2DProvider.R"); runTests()
showMethods("features")
q('no')
source("test_Data2DProvider.R"); runTests()
q('
no
q('no')
source("test_Data2DProvider.R"); runTests()
q('no')
source("test_Data2DProvider.R"); runTests()
features
entities(dp)
getData(dp)[1:2, 1:2]
head(sort(features))
head(sort(entities))
q('no')
source("test_Data2DProvider.R"); runTests()
size(dp)
q('no')
source("test_Data2DProvider.R"); runTests()
dimensions(dp)
q('no')
source("test_Data2DProvider.R"); runTests()
dimensions(dp)
tbl.2
as.matrix(tbl.2)
sum(as.matrix(tbl.2))
source("test_Data2DProvider.R"); runTests()
q('no')
is(x, "list")
q('no')
source("test_Data2DProvider.R"); runTests()
source("test_Data2DProvider.R"); runTests()
q('no')
source("test_PatientHistoryProvider.R"); runTests()
q('no')
source("test_PatientHistoryProvider.R"); runTests()
path
q('no')
source("test_PatientHistoryProvider.R"); runTests()
tokens
path
Q
q('no')
source("test_PatientHistoryProvider.R"); runTests()
tokens
n
n
n
protocol
path
varName <- load(system.file(package="Oncoscape", "extdata", path))
varName
standard.name <- "events"
eval(parse(text=sprintf("%s <- %s", standard.name, varName)))
length(events)
Q
q('no')
source("test_PatientHistoryProvider.R"); runTests()
q('no')
source("test_PatientHistoryProvider.R"); runTests()
path
q('no')
source("test_PatientHistoryProvider.R"); runTests()
q('no')
source("test_PatientHistoryProvider.R"); runTests()
source("test_PatientHistoryProvider.R"); runTests()
cdp
c
q('no')
source("test_PatientHistoryProvider.R"); runTests()
cdp
c
length(events(cdp))
length(getEvents(cdp))
q('no')
source("test_PatientHistoryProvider.R"); runTests()
length(getEvents(cdp))
Q
q('no')
source("test_PatientHistoryProvider.R"); runTests()
c
c
source("test_PatientHistoryProvider.R"); runTests()
getEvents(cdp)
Q
q('no')
source("test_PatientHistoryProvider.R"); runTests()
Q
source("test_PatientHistoryProvider.R"); runTests()
events[[1]]
source("test_PatientHistoryProvider.R"); runTests()
n
source("test_PatientHistoryProvider.R"); runTests()
x[[1]]
events[[1]]
Q
source("test_PatientHistoryProvider.R"); runTests()
q('no')
source("test_PatientHistoryProvider.R"); runTests()
legalEventNames(cdp)
requiredEventNames(cdp)
q('no')
source("test_PatientHistoryProvider.R"); runTests()
legalEventNames(cdp)
requiredEventNames(cdp)
source("test_PatientHistoryProvider.R"); runTests()
source("test_PatientHistoryProvider.R"); runTests()
sort(     c("DOB", "Status",  "Diagnosis", "MRI", "Chemo", "Radiation", "OR", "Pathology", "Encounter", "Progression", "Death")
)
length(events)
sort(unique(unlist(lapply(events, function(event) event$Name))))
   e <- events[[1]]
e
intersect(all.events, legalEventNames(cdp))
length(intersect(all.events, legalEventNames(cdp)))
length(all.events)
all.events
setdiff(requiredEventNames(cdp), all.events)
colnames(tbl)
source("test_PatientHistoryProvider.R"); runTests()
sort(legalEventNames(cdp)
)
q('no')
source("test_Oncoscape.R")
file.exists(filename)
q('no')
source("test_Oncoscape.R")
lines
length(signatureLine)
DATA.PROVIDERS$patientHistory
ls(DATA.PROVIDERS)
path
lines[signatureLine[1]]
text; path; tokens
x <- PatientHistoryProvider(path)
traceback()
sourceURI <- path
protocol; path
protocol
Q
q('no')
source("test_Oncoscape.R")
c
ls(Oncoscape:::.DATA.PROVIDERS)
DATA.PROVIDERS
q('no')
source("test_Oncoscape.R")
test_.setupDataProviders()
c
dataProviders()
ls(dataProviders())
)
class(dp$.mRNA)
class(dp$mRNA)
checkTrue(is, class(dp$mRNA), "LocalFileData2DProvider")
checkTrue(is(dp$mRNA), "LocalFileData2DProvider")
is(dp$mRNA, LocalFileData2DProvider)
is(dp$mRNA, "LocalFileData2DProvider")
class(dp$patientHistory)
class(dp$patientClassification)
source("test_Oncoscape.R"); test_.setupDataProviders()
c
source("test_Oncoscape.R"); test_.setupDataProviders()
c
class(db$patientHistory)
class(dp$patientHistory)
q('no')
source("test_PatientHistoryProvider.R")
x <- events
length(x)
head(unlist(lapply(x, function(e) e.$PatientID)))
head(unlist(lapply(x, function(e) e$PatientID)))
head(unique(unlist(lapply(x, function(e) e$PatientID))))
unique(unlist(lapply(x, function(e) e$PatientID)))
length(events)
   set.seed(31)
sample(all.patientIDs, 5)
sample(all.patientIDs, 3)
poi
poi
length(events.2)
x <- lapply(events, function(event) event$patientID %in% poi)
head(x)
x <- which(unlist(lapply(events, function(event) event$patientID %in% poi)))
length(x)
poi
x[[1]]$patientID
events[[1]]
x <- unlist(lapply(events, function(event) event$patientID %in% poi))
x
lapply(events, function(event) event$patientID %in% poi)
poi
events[[0]]
events[[1]]
poi <- "FC5PKZ244GQOB098PB2IH2C7X33XO1OT765X"
lapply(events, function(event) event$patientID %in% poi)
lapply(events, function(event) event$patientID)
events[[1]]
x <- which(unlist(lapply(events, function(event) event$PatientID %in% poi)))
x
poi
q('no')
source("test_PatientHistoryProvider.R")
source("test_PatientHistoryProvider.R")
q('no')
source("test_PatientHistoryProvider.R")
length(events.2)
q('no')
source("test_PatientHistoryProvider.R")
unique(unlist(lapply(events.2, function(event) event$PatientID)))
source("test_PatientHistoryProvider.R")
test_getEvents()
names(events[[1]])
unique(unlist(lapply(events, names)))
length(all.event.types)
all.event.types
q('no')
source("test_PatientHistoryProvider.R")
runTests()
source("test_PatientHistoryProvider.R"); runTests()
q('no')
source("test_PatientHistoryProvider.R"); runTests()
source("test_PatientHistoryProvider.R"); runTests()
q('no')
source("test_PatientHistoryProvider.R"); runTests()
length(events.3)
all.event.types[1:3]
q('no')
source("test_PatientHistoryProvider.R"); runTests()
Q
c
c
event.names
patient.ids
length(events)
events[[1]]$Name
n
n
n
length(hits)
all(is.na(event.names))
which(unlist(lapply(events, function(event) event$Name %in% event.names)))
unlist(lapply(events, function(event) event$Name %in% event.names))
event.names
events[[1]]$Name
events[[2]]$Name
unlist(lapply(events, function(event) event$Name))
event.names
all.event.types
Q
q('no')
source("test_PatientHistoryProvider.R"); runTests()
length(all.event.types)
length(all.event.types)
all.event.types
length(events.3)
unique(unlist(lapply(events.3, function(event) event$Name)))
length(events.retrieved)
length(patient.ids.retrieved)
length(events.3)
all.event.types.names
all.event.type.names
eoi
length(patient.ids.retrieved)
length(events.4)
source("test_PatientHistoryProvider.R"); runTests()
q('no')
