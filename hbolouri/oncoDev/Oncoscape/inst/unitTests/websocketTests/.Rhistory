names(unlist(mutations))
mutations[[1]]
names(mutations[[1]])
names(mutations[[2]])
lapply(mutations, names)
unlist(lapply(mutations, names))
as.list(table(unlist(lapply(mutations, names))))
mutations[[1]]
mutations
mutations[[1]]
names(mutations[[1]])
          dp <<- DataProvider("MSK_GBM_mutation")
getData(dp, c("EGFR", "IDH1"), c("1007.T.1", "103.1.T.1", "983.T.1", "889.T.1"))
getData(dp, c("1007.T.1", "103.1.T.1", "983.T.1", "889.T.1"), c("EGFR", "IDH1"))
mutations[1]
mutations[[1]]
as.list(mutations[[1]])
unlist(mutations[[1]])
unlist(mutations[[1]], na.rm=FALSE)
unlist(mutations[[1]])
unlist(mutations[[2]])
unlist(mutations[[3]])
unlist(mutations[[4]])
unlist(mutations[[5]])
as.list(unlist(mutations[[1]]))
as.list(unlist(mutations[[2]]))
checkEquals(as.list(unlist(mutations[[2]])), list(EGFR="R222C", rowname="103.1.T.1"))
as.list(unlist(mutations[[3]]))
checkEquals(as.list(unlist(mutations[[3]])), list(rowname="889.T.1"))
as.list(unlist(mutations[[4]]))
checkEquals(as.list(unlist(mutations[[4]])), list(EGRR="R222C R108K", rowname="983.T.1"))
checkEquals(as.list(unlist(mutations[[4]])), list(EGFR="R222C R108K", rowname="983.T.1"))
getData(dp, c("EGFR", "IDH1"))
getData(dp, features=c("EGFR", "IDH1"))
Q
source("test_NanoStringExpressionData.R"); test_getGBMmutations()
   checkEquals(as.list(unlist(mutations[[4]])), list(EGFR="R222C R108K", rowname="983.T.1"))
as.list(unlist(mutations[[4]])
)
as.list(unlist(mutations[[3]]))
as.list(unlist(mutations[[2]]))
as.list(unlist(mutations[[3]]))
as.list(unlist(mutations[[4]]))
as.list(unlist(mutations[[5]]))
as.list(unlist(mutations[[3]]))
checkEquals(as.list(unlist(mutations[[3]])), list(EGFR="R667H",  IDH1="R132H", rowname="0618.T.1"))
Q
source("test_NanoStringExpressionData.R"); test_getGBMmutations()
source("test_NanoStringExpressionData.R"); test_getGBMmutations()
source("test_NanoStringExpressionData.R"); test_getGBMmutations()
reload(); runTests()
source("test_NanoStringExpressionData.R"); runTests()
source("test_NanoStringExpressionData.R"); runTests()
source("test_NanoStringExpressionData.R"); runTests()
source("test_NanoStringExpressionData.R"); runTests()
source("test_NanoStringExpressionData.R"); runTests()
q('no')
source("test_NanoStringExpressionData.R")
source("test_NanoStringExpressionData.R")
rm ("client")
source("test_NanoStringExpressionData.R")
runTests()
runTests()
q('no')
source("websocket_test_TCGADataProviders.R")
runTests()
dp <- DataProvider("TCGA_GBM_copyNumber")
x <- getData(dp)
dim(x)
source("websocket_test_TCGADataProviders.R")
runTests()
runTests()
source("websocket_test_TCGADataProviders.R"); runTests()
q('no')
source("websocket_test_TCGADataProviders.R"); runTests()
q('no')
source("websocket_test_TCGADataProviders.R"); runTests()
q('no')
source("websocket_test_TCGADataProviders.R"); runTests()
length(msg$payload)
Q
q('no')
source("websocket_test_TCGADataProviders.R"); runTests()
Q
q('no')
source("websocket_test_TCGADataProviders.R"); runTests()
length(msg)
Q
q('no')
source("websocket_test_TCGADataProviders.R"); runTests()
Q
q('no')
source("websocket_test_TCGADataProviders.R"); runTests()
msg$cmd
Q
names(msg)
names(msg.incoming)
msg <- msg.incoming
msg$cmd
msg$status
class(msg$payload)
ncar(msg$payload)
nchar(msg$payload)
msg$payload
q('no')
source("websocket_test_TCGADataProviders.R"); runTests()
Q
q('no')
source("websocket_test_TCGADataProviders.R"); runTests()
Q
q('no')
source("websocket_test_TCGADataProviders.R"); runTests()
service(client)
msg.incoming
checkEquals(msg.incoming$cmd, "handle_TCGA_GBM_CopyNumber_Data")
checkEquals(msg.incoming$status, "success")
fromJSON(msg.incoming$payload)
unlist(fromJSON(msg.incoming$payload))
fromJSON(msg.incoming$payload)[[1]]
fromJSON(msg.incoming$payload)[[2]]
   checkEquals(row1, list(AKT=1, ATM=0, rowname="TCGA.02.0003"))
row1
row1
row2
Q
source("websocket_test_TCGADataProviders.R"); runTests()
msg.incoming
q('no')
source("websocket_test_TCGADataProviders.R"); runTests()
service(client)
msg.incoming
Q
q('no')
source("websocket_test_TCGADataProviders.R"); runTests()
source("websocket_test_TCGADataProviders.R"); runTests()
source("websocket_test_TCGADataProviders.R"); runTests()
mtx.as.list
   dp <- DataProvider("TCGA_GBM_copyNumber")

getData(dp, entities=entities, features=features)
q('no')
source("websocket_test_TCGADataProviders.R"); runTests()
source("websocket_test_TCGADataProviders.R"); runTests()
msg.incoming
Q
dp <- DataProvider("TCGA_GBM_mRNA")
   entities <-  c("TCGA.02.0003","TCGA.02.0004")
   features <- c("AKT1", "ATM")
   payload <- list(entities=entities, features=features)

dim(getData(dp, entities, features))
(getData(dp, entities, features))
q('no')
source("websocket_test_TCGADataProviders.R"); runTests()
row1
checkEquals(row1, list(AKT1=-0.1337, ATM=0.3206, rowname="TCGA.02.0003"))
checkEquals(row2, list(AKT1=0.0685, ATM=-0.5156, rowname="TCGA.02.0004"))
row2
q('no')
source("websocket_test_GSKDataProviders.R"); runTests()
source("websocket_test_MSKDataProviders.R"); runTests()
source("websocket_test_MSKDataProviders.R"); runTests()
msg.incoming$cmd
q('no')
source("websocket_test_MSKDataProviders.R"); runTests()
source("websocket_test_MSKDataProviders.R"); runTests()
msg.incoming
mtx.as.list
q('no')
source("websocket_test_MSKDataProviders.R"); runTests()
mtx.as.list
length(mtx.as.list)
row1
source("websocket_test_MSKDataProviders.R"); runTests()
   dp <- DataProvider("MSK_GBM_mRNA")
x <- getData(dp)
dim(x)
x [100:105, 100:105]
x [104:105, 104:105]
rownames(x [104:105, 104:105])
msg.incoming
q('no')
source("websocket_test_MSKDataProviders.R"); runTests()
msg.incoming
row1
row1
row2
row2
source("websocket_test_MSKDataProviders.R"); test_get_MSK_GBM_mRNA_Data()
q('no')
source("websocket_test_MSKDataProviders.R"); runTests()
q('no')
source("websocket_test_MSKDataProviders.R"); runTests()
source("websocket_test_MSKDataProviders.R"); runTests()
source("websocket_test_MSKDataProviders.R"); runTests()
q('no')
source("websocket_test_MSKDataProviders.R"); runTests()
msg.incoming
q('no')
source("websocket_test_MSKDataProviders.R"); 
msg.incoming
mtx.as.list
length(mtx.as.list)
length(mtx.as.list)
mtx.avg[1:5]
mtx.avg[1:3]
names(mtx.avg)
head(mtx.avg)
mean(mtx.avg)
mean(mtx.avg, na.rm=TRUE)
class(mtx.avg)
class(mtx.avg[[1]])
mean(as.numeric(mtx.avg))
mean(as.numeric(mtx.avg), na.rm=TRUE)
wdth(200)
mtx.avg
mean(mtx.avg[-length(mtx.avg)])
(mtx.avg[-length(mtx.avg)])
unlist(mtx.avg[-length(mtx.avg)], use.names=FALSE)
mean(unlist(mtx.avg[-length(mtx.avg)], use.names=FALSE))
head(sort(names(mtx.avg)))
checkEquals(head(sort(names(mtx.avg))), c("AKR1C3", "AKT3", "ANGPTL4", "AQP1", "ARC", "AVIL"))
source("websocket_test_MSKDataProviders.R"); runTests()
source("websocket_test_MSKDataProviders.R"); runTests()
q('no')
source("websocket_test_MSKDataProviders.R"); runTests()
msg.incoming$cmd
q('no')
source("websocket_test_MSKDataProviders.R"); runTests()
msg.incoming
mtx.avg
mean(0.1083581, 0.1268618)
mean(0.1083581,   0.1268618)
mtx.avg$MDM4
getData(dp, entities, features)
dp <- DataProvider("MSK_GBM_mRNA")
getData(dp, entities, features)
mtx <- getData(dp, entities, features)
colSums(mtx)
colSums(mtx)/nrow(mtx)
0.`083581 + 0.1268618
0.083581 + 0.1268618
apply(mtx, 2, sum)
apply(mtx, 2, sum)/nrow(mtx)
mtx.avg
colSums(mtx)/nrow(mtx)
t(colSums(mtx)/nrow(mtx))
mtx.avg
0.108 + 0.127
(0.108 + 0.127)/ 2
list(MDM4=0.11761, REN=-0.26342)
checkEquals(mtx.avg, list(MDM4=0.11761, REN=-0.26342))
checkEquals(mtx.avg, list(MDM4=0.11761, REN=-0.26342, rowname="average"))
source("websocket_test_MSKDataProviders.R"); test_get_MSK_GBM_mRNA_Average_onSubsets()
source("websocket_test_MSKDataProviders.R"); test_get_MSK_GBM_mRNA_Average_onSubsets()
length(mtx.as.list)
length(mtx.as.list[[1]])
(mtx.as.list[[1]])
length(mtx.avg)
sum(mtx.avg[-length(mtx.avg)])
length(mtx.avg)
mtx.avg[length(mtx.avg)]
mtx.avg[-length(mtx.avg)]
mean(mtx.avg[-length(mtx.avg)]
)
mtx.avg[-length(mtx.avg)]
as.numeric(mtx.avg[-length(mtx.avg)])
mean(as.numeric(mtx.avg[-length(mtx.avg)]))
head(mtx.avg)
head(mtx.avg, n=3)
source("websocket_test_MSKDataProviders.R"); test_get_MSK_GBM_mRNA_Average_onSubsets()
runTests()
source("websocket_test_MSKDataProviders.R"); runTests()
q('no')
source("websocket_test_MSKDataProviders.R"); runTests()
dp <- DataProvider("TCGA_GBM_mRNA")
x <- getData(dp)
dim(x)
x [85:87, 85:87]
x [86:87, 86:87]
rownames(x [86:87, 86:87])
msg.incoming
q('no')
source("websocket_test_MSKDataProviders.R"); runTests()
source("websocket_test_TCGADataProviders.R"); runTests()
source("websocket_test_TCGADataProviders.R"); runTests()
msg.incoming
names(msg.incoming)
names(msg.incoming)
names(msg.incoming)[1] == "cmd"
names(msg.incoming)[2] == "callback"
msg.incoming)[2]
names(msg.incoming)[2]
q('no')
source("websocket_test_TCGADataProviders.R"); runTests()
names(msg.incoming)
msg.incoming
q('no')
source("websocket_test_TCGADataProviders.R"); runTests()
msg.incoming
msg.incoming$cmd
c
q('no')
source("websocket_test_TCGADataProviders.R"); 
test_get_TCGA_GBM_mRNA_Average()
q('no')
source("websocket_test_TCGADataProviders.R");  test_get_TCGA_GBM_mRNA_Average()
msg.incoming
q('no')
source("websocket_test_TCGADataProviders.R");  test_get_TCGA_GBM_mRNA_Average()
length(mtx.avg)
mtx.avg
names(mtx.avg)
unlist(mtx.avg, use.names=FALSE)
msg.incoming
q('no')
source("websocket_test_TCGADataProviders.R"); test_get_TCGA_GBM_mRNA_Average()
msg.incoming
msg.incoming
msg.incoming
msg.incoming
q('no')
source("websocket_test_TCGADataProviders.R"); 
source("websocket_test_TCGADataProviders.R"); 
msg.incoming
q('no')
source("websocket_test_TCGADataProviders.R"); 
msg.incoming
ms.incoming
msg.incoming
source("websocket_test_TCGADataProviders.R"); runTests()
msg.incoming
mtx.as.list
test_get_TCGA_GBM_mRNA_Data()
q('no')
source("websocket_test_TCGADataProviders.R"); runTests()
test_get_TCGA_GBM_mRNA_Data()
msg.incoming$cmd
q('no')
library(Oncoscape); startWebApp(file=NA, port=7781L, openBrowser=FALSE)
library(Oncoscape); startWebApp(file=NA, port=7781L, openBrowser=FALSE, )
library(Oncoscape); startWebApp(file=NA, port=7781L, openBrowser=FALSE, manifest=../../scripts/clinicalDataTable3/manifest")
library(Oncoscape); startWebApp(file=NA, port=7781L, openBrowser=FALSE, manifest="../../scripts/clinicalDataTable3/manifest")
sourceURI
traceback()
Q
q('no')
library(Oncoscape); startWebApp(file=NA, port=7781L, openBrowser=FALSE, manifest="../../scripts/clinicalDataTable3/manifest")
sourceURI
c
c
q('no')
source("websocket_test_TCGADataProviders.R"); runTests()
library(Oncoscape); startWebApp(file=NA, port=7781L, openBrowser=FALSE, manifest="../../scripts/clinicalDataTable3/manifest")
c
q('no')
library(Oncoscape); startWebApp(file=NA, port=7781L, openBrowser=FALSE, manifest="../../scripts/clinicalDataTable3/manifest")
c
patientHistoryProvider
library(Oncoscape); startWebApp(file=NA, port=7781L, openBrowser=FALSE, manifest="../../scripts/clinicalDataTable3/manifest")
c
q('no')
library(Oncoscape); startWebApp(file=NA, port=7781L, openBrowser=FALSE, manifest="../../scripts/clinicalDataTable3/manifest")
c
q('no')
library(Oncoscape); startWebApp(file=NA, port=7781L, openBrowser=FALSE, manifest="../../scripts/clinicalDataTable3/manifest")
q('no')
library(Oncoscape); startWebApp(file=NA, port=7781L, openBrowser=FALSE, manifest="../../scripts/clinicalDataTable3/manifest")
x <- env()
x <- environment()
x["php"] <- 99
x$php <- 99
ls(x)
x$php
providers <- new.env(parent=emptyenv())
providers$patientHistory <- 99
ls(providers)
providers$patientHistory
   providers[["patientHistory"]]
q('no')
dir()
source("websocket_test_PatientHistoryProviders.R")
runTests()
Q
q('no;()
q('no')
library(Oncoscape); startWebApp(file=NA, port=7781L, openBrowser=FALSE, manifest="../../scripts/clinicalDataTable3/manifest")
q('no')
library(Oncoscape); startWebApp(file=NA, port=7781L, openBrowser=FALSE, manifest="../../scripts/clinicalDataTable3/manifest")
q('no')
library(Oncoscape); startWebApp(file=NA, port=7781L, openBrowser=FALSE, manifest="../../scripts/clinicalDataTable3/manifest")
q('no')
library(Oncoscape); startWebApp(file=NA, port=7781L, openBrowser=FALSE, manifest="../../scripts/clinicalDataTable3/manifest")
q('no')
 library(Oncoscape); startWebApp(file=NA, port=7781L, openBrowser=FALSE, manifest="../../scripts/clinicalDataTable3/manifest")
q('no')
 library(Oncoscape); startWebApp(file=NA, port=7781L, openBrowser=FALSE, manifest="../../scripts/clinicalDataTable3/manifest")
q('no')
 library(Oncoscape); startWebApp(file=NA, port=7781L, openBrowser=FALSE, manifest="../../scripts/clinicalDataTable3/manifest")
q('no')
 library(Oncoscape); startWebApp(file=NA, port=7781L, openBrowser=FALSE, manifest="../../scripts/clinicalDataTable3/manifest")
 library(Oncoscape); startWebApp(file=NA, port=7781L, openBrowser=FALSE, manifest="../../scripts/pca2/manifest.txt")
q('no')
 library(Oncoscape); startWebApp(file=NA, port=7781L, openBrowser=FALSE, manifest="../../scripts/pca2/manifest.txt")
q('no')
 library(Oncoscape); startWebApp(file=NA, port=7781L, openBrowser=FALSE, manifest="../../scripts/pca2/manifest.txt")
q('no')
 library(Oncoscape); startWebApp(file=NA, port=7781L, openBrowser=FALSE, manifest="../../scripts/pca2/manifest.txt")
q('no')
 library(Oncoscape); startWebApp(file=NA, port=7781L, openBrowser=FALSE, manifest="../../scripts/pca2/manifest.txt")
q('no')
 library(Oncoscape); startWebApp(file=NA, port=7781L, openBrowser=FALSE, manifest="../../scripts/pca2/manifest.txt")
q('no')
 library(Oncoscape); startWebApp(file=NA, port=7781L, openBrowser=FALSE, manifest="../../scripts/pca2/manifest.txt")
q('no')
 library(Oncoscape); startWebApp(file=NA, port=7781L, openBrowser=FALSE, manifest="../../scripts/pca2/manifest.txt")
q('no')
 library(Oncoscape); startWebApp(file=NA, port=7781L, openBrowser=FALSE, manifest="../../scripts/pca2/manifest.txt")
q('no')
 library(Oncoscape); startWebApp(file=NA, port=7781L, openBrowser=FALSE, manifest="../../scripts/pca2/manifest.txt")
q('no')
library(Oncoscape); startWebApp(file=NA, port=7781L, openBrowser=FALSE, manifest="../../scripts/clinicalDataTable3/manifest")
q('no')
 library(Oncoscape); startWebApp(file=NA, port=7781L, openBrowser=FALSE, manifest="../../scripts/pca2/manifest.txt")
dim(mtx)
mtx[1:10, 1:10]
min(mtx)
length(which(is.na(mtx)))
length(mtx)
?prcomp
x <- prcomp(mtx, center=TRUE, scale=TRUE, na.action=na.omit)
min(mtx)
length(which(is.na(mtx)))
mtx[is.na(mtx)] = 0
length(which(is.na(mtx)))
x <- prcomp(mtx, center=TRUE, scale=TRUE, na.action=na.omit)
xx <- colSums(mtx)
xx
which(xx == 0)
xx
dim(mtx)
   column.sums <- colSums(mtx)
   removers <- which(column.sums == 0)
   if(length(removers) > 0) {
       printf("removing %d columns", length(removers))
       mtx <- mtx[, -removers]
       } # if removers

dim(mtx)
removers
removers <- as.integer(removers)
mtx <- mtx[,-removers]
dim(mtx)
x <- prcomp(mtx, center=TRUE, scale=TRUE, na.action=na.omit)
names(x)
Q
q('no')
 library(Oncoscape); startWebApp(file=NA, port=7781L, openBrowser=FALSE, manifest="../../scripts/pca2/manifest.txt")
dim(mtx)
n
n
?prcomp
c
q('no')
 library(Oncoscape); startWebApp(file=NA, port=7781L, openBrowser=FALSE, manifest="../../scripts/pca2/manifest.txt")
length(which(is.na(mtx)))
colSums(mtx)
which(colSums(mtx)==0)
PCs <- prcomp(mtx,center=T,scale=T)
PCsx
PCs$x
dim(result)
head(result)
Q
q('no')
 library(Oncoscape); startWebApp(file=NA, port=7781L, openBrowser=FALSE, manifest="../../scripts/pca2/manifest.txt")
c
q('no')
 library(Oncoscape); startWebApp(file=NA, port=7781L, openBrowser=FALSE, manifest="../../scripts/pca2/manifest.txt")
 library(Oncoscape); startWebApp(file=NA, port=7781L, openBrowser=FALSE, manifest="../../scripts/pca2/manifest.txt")
q('no')
 library(Oncoscape); startWebApp(file=NA, port=7781L, openBrowser=FALSE, manifest="../../scripts/pca2/manifest.txt")
q('no')
library(Oncoscape); startWebApp(file=NA, port=7781L, openBrowser=FALSE, manifest="../../scripts/tabsApp/manifest.txt")
tbl <- Data2DProvider("pkg://tcgaGBM/tbl.dzSubTypes.RData")
q('no')
library(Oncoscape); startWebApp(file=NA, port=7781L, openBrowser=FALSE, manifest="../../scripts/tabsApp/manifest.txt")
q('no')
source("websocket_test_PatientHistoryProviders.R"); runTests()
dim(tbl)
tbl
length(x)
x[[0]]
x[0]
length(x)
x[[1]]
q('no')
source("websocket_test_PatientHistoryProviders.R"); runTests()
msg.incoming
q('no')
